// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum ChannelType {
  SERVER_TEXT
  DM
  SERVER_VOICE
  GROUP_DM
  SERVER_CATEGORY
  SERVER_ANNOUCEMENT
  ANNOUNCEMENT_THREAD
  PUBLIC_THREAD
  PRIVATE_THREAD
  SERVER_STAGE_VOICE
  SERVER_DIRECTORY
  SERVER_FORUM
  SERVER_MEDIA
}

enum UserRoles {
  ADMIN
  USER
}

model User {
  id       String @id @default(uuid()) @map("_id")
  email    String @unique
  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar      Bytes?
  banner      Bytes?
  bannerColor String?

  bio     String?
  Message Message[]
  servers Server[]  @relation("ServerOwner")

  roles UserRoles[] @default([USER])
  Log   Log[]

  friends  Friend[] @relation("UserToFriends")
  friendOf Friend[] @relation("FriendsToUser")

  memberOf ServerMember[] @relation("UserToServerMember")

  channels      ChannelRecipient[] @relation(name: "ChannelRecipients")
  channelsOwned Channel[]          @relation("ChannelOwner")

  @@index([username, email])
}

model ChannelRecipient {
  id        String @id @default(uuid()) @map("_id")
  channelId String
  userId    String

  channel Channel @relation(name: "ChannelRecipients", fields: [channelId], references: [id])
  user    User    @relation(name: "ChannelRecipients", fields: [userId], references: [id])

  @@unique([channelId, userId])
}

model Friend {
  id       String @id @default(uuid()) @map("_id")
  userId   String
  friendId String

  user   User @relation(name: "UserToFriends", fields: [userId], references: [id])
  friend User @relation(name: "FriendsToUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model ServerMember {
  id       String      @id @default(uuid()) @map("_id")
  serverId String
  userId   String
  roles    UserRoles[]

  user   User   @relation(name: "UserToServerMember", fields: [userId], references: [id])
  server Server @relation(name: "ServerToServerMember", fields: [serverId], references: [id])

  @@unique([serverId, userId])
}

model Message {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  content   String
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  @@index([channelId, createdAt])
}

model PermissionOverwrite {
  id    String @id @default(uuid()) @map("_id")
  type  Int
  allow String
  deny  String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
}

model Channel {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  type             ChannelType
  topic            String?
  nsfw             Boolean
  messages         Message[]
  bitrate          Int?
  userLimit        Int?
  rateLimitPerUser Int?
  recipients       ChannelRecipient[] @relation(name: "ChannelRecipients")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastMessageId String?

  Server               Server?               @relation(fields: [serverId], references: [id])
  serverId             String?
  description          String?
  position             Int?
  permissionOverwrites PermissionOverwrite[]

  owner   User?   @relation(name: "ChannelOwner", fields: [ownerId], references: [id])
  ownerId String?

  @@index([serverId, position])
}

model Roles {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  permissions String[]
  color       String
  hoist       Boolean
  mentionable Boolean

  Server   Server @relation(fields: [serverId], references: [id])
  serverId String

  @@unique([name, serverId])
  @@index([serverId, name])
}

model Log {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    String
  message String

  Server   Server @relation(fields: [serverId], references: [id])
  serverId String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  @@unique([serverId, authorId, createdAt])
  @@index([serverId, createdAt])
  @@index([authorId, createdAt])
}

model Server {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  owner       User           @relation(name: "ServerOwner", fields: [ownerId], references: [id])
  ownerId     String         @map("owner_id")
  members     ServerMember[] @relation("ServerToServerMember")
  channels    Channel[]
  memberId    String
  roles       Roles[]
  icon        Bytes?
  banner      Bytes?
  bannerColor String?
  description String?
  logs        Log[]

  @@unique([name, ownerId])
}
